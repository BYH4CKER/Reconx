#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script for Vulnerability Scanner
"""

import sys
import os

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules import vulnerability_scanner
from modules import port_scan

def test_vulnerability_scanner():
    """Test vulnerability scanner with mock data"""
    
    print("RECONX VULNERABILITY SCANNER TEST")
    print("="*50)
    
    # Test target
    target = "192.168.1.100"
    
    # Mock open ports data (simulating Apache server with MySQL, SSH, etc.)
    mock_open_ports = [
        {
            'port': 22,
            'protocol': 'tcp',
            'state': 'open',
            'service': 'openssh',
            'version': '8.2'
        },
        {
            'port': 80,
            'protocol': 'tcp', 
            'state': 'open',
            'service': 'apache',
            'version': '2.4.49'
        },
        {
            'port': 443,
            'protocol': 'tcp',
            'state': 'open', 
            'service': 'apache',
            'version': '2.4.49'
        },
        {
            'port': 3306,
            'protocol': 'tcp',
            'state': 'open',
            'service': 'mysql',
            'version': '8.0.25'
        },
        {
            'port': 21,
            'protocol': 'tcp',
            'state': 'open',
            'service': 'ftp',
            'version': 'vsftpd 2.3.4'
        },
        {
            'port': 139,
            'protocol': 'tcp',
            'state': 'open',
            'service': 'netbios-ssn',
            'version': 'Samba 4.10.16'
        },
        {
            'port': 445,
            'protocol': 'tcp',
            'state': 'open',
            'service': 'microsoft-ds',
            'version': 'Samba 4.10.16'
        }
    ]
    
    print(f"Target: {target}")
    print(f"Mock Open Ports: {len(mock_open_ports)}")
    print("\nStarting vulnerability scan...\n")
    
    try:
        # Run vulnerability scan
        results = vulnerability_scanner.scan_vulnerabilities(target, mock_open_ports, timeout=30)
        
        print("\n" + "="*60)
        print("VULNERABILITY SCAN RESULTS SUMMARY:")
        print("="*60)
        
        print(f"Total Vulnerabilities: {results.get('total_vulnerabilities', 0)}")
        print(f"Critical: {results.get('critical_count', 0)}")
        print(f"High: {results.get('high_count', 0)}")
        print(f"Medium: {results.get('medium_count', 0)}")
        print(f"Low: {results.get('low_count', 0)}")
        
        # Show some example vulnerabilities
        vulnerabilities = results.get('vulnerabilities', [])
        if vulnerabilities:
            print(f"\nEXAMPLE VULNERABILITIES (showing first 3):")
            for i, vuln in enumerate(vulnerabilities[:3], 1):
                if vuln['type'] == 'cve':
                    exploit_count = len(vuln.get('exploits', []))
                    print(f"\n{i}. {vuln.get('cve_id', 'N/A')}: {vuln.get('title', 'Unknown')}")
                    print(f"   Severity: {vuln.get('severity', 'unknown').upper()}")
                    print(f"   Port: {vuln.get('port', 'N/A')} | Service: {vuln.get('service', 'N/A')}")
                    print(f"   CVSS: {vuln.get('cvss', 'N/A')} | Exploits: {exploit_count}")
                    
                    if vuln.get('exploits'):
                        print(f"   Available Exploits:")
                        for exploit in vuln.get('exploits', [])[:2]:
                            print(f"     - {exploit.get('title', 'Unknown')} ({exploit.get('type', 'unknown')})")
                else:
                    print(f"\n{i}. NSE Detection: {vuln.get('title', 'Unknown')}")
                    print(f"   Severity: {vuln.get('severity', 'unknown').upper()}")
                    print(f"   Port: {vuln.get('port', 'N/A')} | Script: {vuln.get('script', 'N/A')}")
        
        # NSE Results
        nse_results = results.get('nse_results', {})
        if nse_results:
            print(f"\nNSE SCRIPTS EXECUTED:")
            for port, scripts in nse_results.items():
                print(f"   Port {port}: {len(scripts)} scripts")
        
        # CVE Matches
        cve_matches = results.get('cve_matches', {})
        if cve_matches:
            print(f"\nCVE MATCHES:")
            for service, cve_data in cve_matches.items():
                cve_count = len(cve_data.get('cves', []))
                print(f"   {service}: {cve_count} CVEs found")
        
        # Exploit Matches
        exploit_matches = results.get('exploit_matches', {})
        if exploit_matches:
            total_exploits = sum(len(exploits) for exploits in exploit_matches.values())
            print(f"\nTOTAL EXPLOITS FOUND: {total_exploits}")
            for service, exploits in exploit_matches.items():
                print(f"   {service}: {len(exploits)} exploits")
        
        print(f"\n{'='*60}")
        print("Test completed successfully!")
        
        return results
        
    except Exception as e:
        print(f"[ERROR] Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    test_vulnerability_scanner() 