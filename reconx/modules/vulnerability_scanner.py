#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Vulnerability Scanner Module
CVE detection, NSE scripts, and exploit matching
"""

import subprocess
import requests
import json
import re
import sys
import os
import time
from datetime import datetime
from colorama import Fore, Style
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.formatter import print_success, print_error, print_info, print_warning, print_result

def scan_vulnerabilities(target, open_ports, timeout=30):
    """Main vulnerability scanning function"""
    print_info(f"Starting vulnerability scan for {target}")
    
    results = {
        'target': target,
        'scan_time': datetime.now().isoformat(),
        'vulnerabilities': [],
        'nse_results': {},
        'cve_matches': {},
        'exploit_matches': {},
        'total_vulnerabilities': 0,
        'critical_count': 0,
        'high_count': 0,
        'medium_count': 0,
        'low_count': 0
    }
    
    # 1. Run NSE vulnerability scripts
    print_info("Running NSE vulnerability scripts...")
    nse_results = run_nse_scripts(target, open_ports, timeout)
    results['nse_results'] = nse_results
    
    # 2. Search CVEs for services
    print_info("Searching CVE database...")
    cve_results = search_service_cves(open_ports)
    results['cve_matches'] = cve_results
    
    # 3. Find exploits
    print_info("Searching for exploits...")
    exploit_results = find_exploits(cve_results)
    results['exploit_matches'] = exploit_results
    
    # 4. Compile vulnerabilities
    all_vulns = compile_vulnerabilities(nse_results, cve_results, exploit_results, open_ports)
    results['vulnerabilities'] = all_vulns
    
    # 5. Count by severity
    severity_counts = count_vulnerabilities(all_vulns)
    results.update(severity_counts)
    
    # 6. Display summary
    display_vuln_summary(results)
    
    return results

def run_nse_scripts(target, open_ports, timeout):
    """Run NSE vulnerability scripts"""
    nse_results = {}
    
    # NSE scripts by port
    scripts_by_port = {
        21: ['ftp-anon', 'ftp-bounce'],
        22: ['ssh-hostkey', 'ssh-auth-methods'],
        23: ['telnet-encryption'],
        25: ['smtp-open-relay', 'smtp-enum-users'],
        53: ['dns-zone-transfer'],
        80: ['http-vuln-cve2017-5638', 'http-vuln-cve2014-6271', 'http-enum'],
        135: ['msrpc-enum'],
        139: ['smb-vuln-ms17-010', 'smb-vuln-ms08-067', 'smb-enum-shares'],
        143: ['imap-capabilities'],
        443: ['ssl-heartbleed', 'ssl-poodle', 'ssl-cert'],
        445: ['smb-vuln-ms17-010', 'smb-vuln-ms08-067', 'smb-protocols'],
        3389: ['rdp-vuln-ms12-020']
    }
    
    for port_info in open_ports:
        port = port_info['port']
        if port in scripts_by_port:
            print_info(f"Running NSE scripts for port {port}")
            port_results = {}
            
            for script in scripts_by_port[port]:
                try:
                    result = run_single_nse(target, port, script, timeout)
                    if result:
                        port_results[script] = result
                        print_success(f"NSE {script} completed")
                except Exception as e:
                    print_error(f"NSE {script} failed: {str(e)}")
            
            if port_results:
                nse_results[port] = port_results
    
    return nse_results

def run_single_nse(target, port, script, timeout):
    """Run single NSE script"""
    cmd = ['nmap', '-p', str(port), '--script', script, '-T4', target]
    
    try:
        process = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
        if process.returncode == 0 and process.stdout:
            return parse_nse_output(process.stdout, script)
    except subprocess.TimeoutExpired:
        print_warning(f"NSE script {script} timed out")
    
    return None

def parse_nse_output(output, script_name):
    """Parse NSE output for vulnerabilities"""
    lines = output.split('\n')
    result = {'script': script_name, 'output': [], 'vulnerabilities': []}
    
    for line in lines:
        line = line.strip()
        if '|' in line or script_name in line:
            result['output'].append(line)
            
            # Check for vulnerability keywords
            if any(word in line.lower() for word in [
                'vulnerable', 'exploit', 'backdoor', 'weak', 'cve-',
                'ms17-010', 'ms08-067', 'heartbleed', 'poodle'
            ]):
                result['vulnerabilities'].append(line)
    
    return result if result['output'] else None

def search_service_cves(open_ports):
    """Search CVE database for service versions"""
    cve_results = {}
    
    for port_info in open_ports:
        service = port_info.get('service', '')
        version = port_info.get('version', '')
        port = port_info['port']
        
        if service and service != 'unknown':
            print_info(f"Searching CVEs for {service} {version}")
            
            # Mock CVE data (in real implementation, use CVE APIs)
            cves = generate_mock_cves(service, version)
            
            if cves:
                cve_results[f"{port}/{service}"] = {
                    'service': service,
                    'version': version,
                    'port': port,
                    'cves': cves
                }
                print_success(f"Found {len(cves)} CVEs for {service}")
    
    return cve_results

def generate_mock_cves(service, version):
    """Generate mock CVE data for demonstration"""
    mock_cves = {
        'apache': [
            {'id': 'CVE-2021-41773', 'title': 'Apache HTTP Server Path Traversal', 'cvss': 7.5, 'year': '2021'},
            {'id': 'CVE-2021-42013', 'title': 'Apache HTTP Server Path Traversal and RCE', 'cvss': 9.8, 'year': '2021'},
            {'id': 'CVE-2022-22720', 'title': 'Apache HTTP Server mod_lua Denial of Service', 'cvss': 7.4, 'year': '2022'}
        ],
        'openssh': [
            {'id': 'CVE-2020-14145', 'title': 'OpenSSH Observable Discrepancy', 'cvss': 5.3, 'year': '2020'},
            {'id': 'CVE-2021-41617', 'title': 'OpenSSH Privilege Escalation', 'cvss': 7.0, 'year': '2021'}
        ],
        'nginx': [
            {'id': 'CVE-2021-23017', 'title': 'nginx Resolver Off-by-one', 'cvss': 8.1, 'year': '2021'},
            {'id': 'CVE-2022-41741', 'title': 'nginx HTTP/2 Memory Disclosure', 'cvss': 7.5, 'year': '2022'}
        ],
        'mysql': [
            {'id': 'CVE-2021-2154', 'title': 'MySQL Server Vulnerability', 'cvss': 4.9, 'year': '2021'},
            {'id': 'CVE-2021-2166', 'title': 'MySQL Server DML Vulnerability', 'cvss': 6.5, 'year': '2021'}
        ],
        'ftp': [
            {'id': 'CVE-2021-3618', 'title': 'VSFTPD Backdoor', 'cvss': 9.8, 'year': '2021'}
        ]
    }
    
    # Return CVEs for matching service
    for svc, cves in mock_cves.items():
        if svc in service.lower():
            return cves[:3]  # Return first 3 CVEs
    
    return []

def find_exploits(cve_results):
    """Find exploits for discovered CVEs"""
    exploit_results = {}
    
    # Mock exploit database
    exploit_db = {
        'CVE-2021-41773': [
            {'type': 'exploit-db', 'id': '50383', 'title': 'Apache 2.4.49 - Path Traversal RCE'},
            {'type': 'metasploit', 'module': 'exploit/multi/http/apache_normalize_path_rce', 'title': 'Apache Path Traversal'}
        ],
        'CVE-2021-42013': [
            {'type': 'exploit-db', 'id': '50406', 'title': 'Apache 2.4.49/2.4.50 - Path Traversal and RCE'},
            {'type': 'metasploit', 'module': 'exploit/multi/http/apache_normalize_path_rce', 'title': 'Apache Normalize Path RCE'}
        ],
        'CVE-2020-14145': [
            {'type': 'exploit-db', 'id': '48758', 'title': 'OpenSSH Username Enumeration'}
        ]
    }
    
    for service_key, cve_data in cve_results.items():
        exploits = []
        
        for cve in cve_data.get('cves', []):
            cve_id = cve.get('id')
            if cve_id in exploit_db:
                exploits.extend(exploit_db[cve_id])
        
        if exploits:
            exploit_results[service_key] = exploits
            print_success(f"Found {len(exploits)} exploits for {cve_data['service']}")
    
    return exploit_results

def compile_vulnerabilities(nse_results, cve_results, exploit_results, open_ports):
    """Compile all vulnerabilities"""
    vulnerabilities = []
    
    # Add NSE vulnerabilities
    for port, scripts in nse_results.items():
        for script_name, script_result in scripts.items():
            if script_result.get('vulnerabilities'):
                for vuln in script_result['vulnerabilities']:
                    vulnerability = {
                        'type': 'nse_script',
                        'port': port,
                        'script': script_name,
                        'title': vuln,
                        'severity': determine_severity(vuln),
                        'source': 'nmap_nse'
                    }
                    vulnerabilities.append(vulnerability)
    
    # Add CVE vulnerabilities
    for service_key, cve_data in cve_results.items():
        for cve in cve_data.get('cves', []):
            exploits = exploit_results.get(service_key, [])
            related_exploits = [e for e in exploits if cve.get('id') in str(e)]
            
            vulnerability = {
                'type': 'cve',
                'port': cve_data['port'],
                'service': cve_data['service'],
                'cve_id': cve.get('id'),
                'title': cve.get('title'),
                'cvss': cve.get('cvss', 0),
                'severity': cvss_to_severity(cve.get('cvss', 0)),
                'year': cve.get('year'),
                'exploits': related_exploits,
                'source': 'cve_database'
            }
            vulnerabilities.append(vulnerability)
    
    return vulnerabilities

def determine_severity(vuln_text):
    """Determine severity from vulnerability text"""
    vuln_lower = vuln_text.lower()
    
    if any(word in vuln_lower for word in ['critical', 'rce', 'remote code', 'ms17-010']):
        return 'critical'
    elif any(word in vuln_lower for word in ['high', 'exploit', 'backdoor', 'heartbleed']):
        return 'high'
    elif any(word in vuln_lower for word in ['medium', 'weak', 'disclosure']):
        return 'medium'
    else:
        return 'low'

def cvss_to_severity(cvss_score):
    """Convert CVSS score to severity"""
    if cvss_score >= 9.0:
        return 'critical'
    elif cvss_score >= 7.0:
        return 'high'
    elif cvss_score >= 4.0:
        return 'medium'
    else:
        return 'low'

def count_vulnerabilities(vulnerabilities):
    """Count vulnerabilities by severity"""
    counts = {
        'total_vulnerabilities': len(vulnerabilities),
        'critical_count': 0,
        'high_count': 0,
        'medium_count': 0,
        'low_count': 0
    }
    
    for vuln in vulnerabilities:
        severity = vuln.get('severity', 'low')
        counts[f'{severity}_count'] += 1
    
    return counts

def display_vuln_summary(results):
    """Display vulnerability summary"""
    total = results['total_vulnerabilities']
    critical = results['critical_count']
    high = results['high_count']
    medium = results['medium_count']
    low = results['low_count']
    
    print(f"\n{Fore.CYAN}{'='*60}")
    print(f"  VULNERABILITY SCAN SUMMARY")
    print(f"{'='*60}{Style.RESET_ALL}")
    
    print_result("Target", results['target'])
    print_result("Total Vulnerabilities", total)
    
    if critical > 0:
        print(f"    {Fore.RED}[CRITICAL] {critical}{Style.RESET_ALL}")
    if high > 0:
        print(f"    {Fore.YELLOW}[HIGH] {high}{Style.RESET_ALL}")
    if medium > 0:
        print(f"    {Fore.CYAN}[MEDIUM] {medium}{Style.RESET_ALL}")
    if low > 0:
        print(f"    {Fore.GREEN}[LOW] {low}{Style.RESET_ALL}")
    
    # Show example vulnerabilities with exploits
    if results['vulnerabilities']:
        print(f"\n{Fore.YELLOW}VULNERABILITIES WITH EXPLOITS:{Style.RESET_ALL}")
        exploit_count = 0
        
        for vuln in results['vulnerabilities'][:5]:
            if vuln['type'] == 'cve' and vuln.get('exploits'):
                exploit_count += len(vuln['exploits'])
                severity_color = {
                    'critical': Fore.RED,
                    'high': Fore.YELLOW,
                    'medium': Fore.CYAN,
                    'low': Fore.GREEN
                }.get(vuln.get('severity', 'low'), Fore.WHITE)
                
                exploit_text = f" -> {len(vuln['exploits'])} exploits"
                print(f"  {severity_color}[{vuln.get('severity', 'low').upper()}] {vuln.get('cve_id')}: {vuln.get('title')}{exploit_text}{Style.RESET_ALL}")
                
                for exploit in vuln['exploits'][:2]:  # Show first 2 exploits
                    print(f"    {Fore.GREEN}|- {exploit.get('type', 'unknown')}: {exploit.get('title', 'Unknown')}{Style.RESET_ALL}")
        
        if exploit_count > 0:
            print(f"\n{Fore.RED}[ALERT] TOTAL: {exploit_count} exploits found for discovered vulnerabilities!{Style.RESET_ALL}")
    
    if critical > 0 or high > 0:
        print(f"\n{Fore.RED}[ALERT] IMMEDIATE ACTION REQUIRED!{Style.RESET_ALL}")
        print(f"   Critical/High severity vulnerabilities detected!")
    
    print() 